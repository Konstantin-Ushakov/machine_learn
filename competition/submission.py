
import numpy as np
import pandas as pd
import pickle
import base64
import bz2

import torch
import torch.nn as nn
import torch.nn.functional as F

import copy
from kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col

N_ROWS = 7
N_COLS = 11
N_CELL = N_ROWS * N_COLS
max_moves = 200

ACTIONS = [
    Action.NORTH.name,
    Action.WEST.name,
    Action.SOUTH.name,
    Action.EAST.name,
]
# Верх лево низ право

class DuelingDQN(nn.Module):
    def __init__(self, actions, input_shape=(4, 4, 5)):
        super(DuelingDQN, self).__init__()
        self.actions = actions

        n_neurons = np.prod(input_shape)
        # Advantages A(s, a)
        self.fc_a = nn.Sequential(
        nn.Flatten(),
        nn.Linear(n_neurons, int(n_neurons / 2)),
        nn.ReLU(),
        nn.Linear(int(n_neurons / 2), len(actions))
        )
        # Values of state V(s)
        self.fc_v = nn.Sequential(
        nn.Flatten(),
        nn.Linear(n_neurons, int(n_neurons / 2)),
        nn.ReLU(),
        nn.Linear(int(n_neurons / 2), 1)
        )

    def forward(self, state):
        val = self.fc_v(state)
        adv = self.fc_a(state)
        # Q(s, a) = V(s) + A(s, a)
        # Subtract the mean for stability
        return val + adv - adv.mean()


class Agent:
    def __init__(self, model, actions):
        self.model = model
        self.actions = actions
        self.prev_opp_action = None
    
    def get_action(self, obs_dict, config_dict):
        """
            Receive the state (np.ndarray), transform it to the tensor format,
            choose an action and fill the buffers.
        """
        state = self.edit_last_player_move(self.process_state(obs_dict, config_dict), self.prev_opp_action)
        state_t = torch.FloatTensor(state).view(1, 1, 4, 4, 5)
        # Choose the action with the best reward
        q_values = self.model(state_t)[0].detach().numpy()
        if self.prev_opp_action:
            q_values[self.prev_opp_action] = -np.inf
        action_id = np.argmax(q_values)
        while action_id == self.prev_opp_action:
            action_id = (action_id + 1) % 4
        self.prev_opp_action = self.get_opposite_idx_move(action_id)
        return self.actions[action_id]
    
    def process_state(self, obs_dict, config_dict):
        observation = Observation(obs_dict)
        configuration = Configuration(config_dict)
        player_index = observation.index
        b_state={
            'blank': 0, # Empty cell
            'x': -1, # Head of opponent player
            'h': 1, # Head of current player
            'b': -2, # Body cell
            'f': 2, # Food
        }
        # строим доску
        board = b_state['blank'] * np.zeros(N_CELL).astype(int).reshape((N_ROWS, N_COLS))
        # гуси
        geese = observation.geese
        for goose in geese:
            for i, cell in enumerate(goose):
                row, col = row_col(cell, configuration.columns)
                board[row][col] = b_state['b']
        for i in range(len(geese)):
            if(len(geese[i]) <= 0):
                continue
            head_row, head_col = row_col(geese[i][0], configuration.columns)
            if player_index == i:
                board[head_row][head_col] = b_state['h']
            else:
                board[head_row][head_col] = b_state['x']
        # food
        foods = observation.food
        for food in foods:
            food_row, food_col = row_col(food, configuration.columns)
            board[food_row][food_col] = b_state['f']
        board = self.centroid_agent(board, geese[player_index][0], configuration)
        return board
    
    def get_opposite_idx_move(self, idx):
        # ['NORTH', 'WEST', 'SOUTH', 'EAST']
        return (idx + 2) % 4
    
    def edit_last_player_move(self, board, idx_opposite):
        # ['NORTH', 'WEST', 'SOUTH', 'EAST']
        # CENTER BOARD [3, 5]
        # [ 2,4 2,5 2,6
        #   3,4 3,5 3,6
        #   4,4 4,5 4,6]
        if idx_opposite == 0:
            board[2][5] = -2
        elif idx_opposite == 1:
            board[3][4] = -2
        elif idx_opposite == 2:
            board[4][5] = -2
        elif idx_opposite == 3:
            board[3][6] = -2
        board_rot = np.zeros((7, 5))
        for i in range(7):
            for j in range(5):
                board_rot[i][j] = board[5 - j][2 + i]
        small_boards = np.array([
            board[:4, 3:8],
            board_rot[:4],
            board[3:, 3:8][::-1, ::-1],
            board_rot[3:][::-1, ::-1],
        ])
        return small_boards
    
    def centroid_agent(self, board, head, configuration):
        head_row, head_col = row_col(head, configuration.columns)
        # X is [0, 11), center is 5
        # Y is [0, 7), center is 3
        dX = head_col - 5
        dY = 3 - head_row
        # Сдвиг строк - dY
        if dY != 0:
            board = np.vstack((board[-dY:], board[:-dY]))
        # Сдвиг колонок - dX
        if dX != 0:
            board = np.hstack((board[:, dX:], board[:, :dX]))
        return board
    
    def agent(self, obs_dict, config_dict):
        return self.get_action(obs_dict, config_dict)
    
    def __call__(self, obs_dict, config_dict, *args, **kwargs):
        return self.get_action(obs_dict, config_dict)

state_dict_dump = b''
state_dict = pickle.loads(bz2.decompress(base64.b64decode(state_dict_dump)))
model = DuelingDQN(actions=ACTIONS)
model.load_state_dict(state_dict)
model.eval()
myAgent = Agent(model=model, actions=ACTIONS)

def agent(obs_dict, config_dict):
    return myAgent(obs_dict, config_dict)
